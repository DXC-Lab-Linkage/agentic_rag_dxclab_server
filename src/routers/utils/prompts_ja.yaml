# --- Used at auto_rag_agent.py ---

select_tool: |
  # 指示
  {plan}

  # 重要: ツール呼び出しの方法
  - 標準のfunction calling形式でツールを呼び出してください
  - JSON形式やテキスト形式で返答しないでください
  - 直接ツールを実行してください

  # 注意事項
  - 上の指示の中に明確にツール名が書いてある場合は、そのツールを呼んでください
  - 質問やメッセージは不要です
  - 呼ぶべきツールが不明の場合は以下の「使用可能なツールの情報」をもとに選択してください
  - 検索が必要か、それ以外の作業が必要かをまず判断してください
  - 不明な場合は ans_llm_base を呼んでください
  - 「検索ツール」は検索以外の目的で呼び出してはいけません

  # 使用可能なツールの情報
  {tool_info}

# --- Used at router_agent.py ---

route_request: |
  # 指示
  - ユーザーからの質問・依頼に対して呼び出すAI Agentを決定してください。
  - また、質問に「これ」、「これら」、「それ」、「この」等の代名詞が含まれているときは、それを指す言葉を全て省略せずに置き替えて明確にしてrevised_requestに書いてください。変更が無い場合は、ユーザーからの質問をそのまま、revised_requestに書いてください。revised_requestを作成するときにユーザーの質問・依頼の意図を考えてください。代名詞が残ったままにならないようにしてください。後続の処理で誤った調査をしてしまう可能性が有るためです。
  - 会話履歴も参考にしてください。文脈を理解してください。代名詞が無い場合でも前の会話の文脈をもとにユーザーが質問している場合があります。例えば、ユーザーの質問に対して、AI Agentが不明点を確認して、ユーザーがそれに答えている場合は、その一連の会話の情報をまとめて、revised_requestを作成する必要が有ります。
  - 質問中に代名詞が無くても前の会話の内容を踏まえた回答をユーザーが求めていることがありますので、その場合は会話履歴を見て指している内容を推測してください。
  - 現在、～年前等の日時に関する質問では以下の「現在の日時」を起点にして年月日や時間を算出して、revised_requestに反映してください。
  - もし会話履歴を参考にしても代名詞が指している内容が不明であれば、詳細をユーザーに確認する必要があるため。ask_human agentを呼び出してユーザーに質問をしてください。主語、目的語が不明な場合もユーザーに確認してください。ただし、ask_humanはできるだけ呼ばないようにしてください。何度も聞かれるとユーザーが困るためです。直近の会話履歴を見ると、直近で質問を下かどうかが分かります。呼ぶ場合は、ユーザーへの質問をJsonのrevised_requestに書き、Jsonで"agent_name": "ask_human"を指定してください。
  - ユーザーからWebでの検索や最新情報の調査を頼まれたら、Jsonで"agent_name": "auto_research"を指定してください。
  - ユーザーが「1,2,3について調査して」、「2番目と3番目を比較して」のように数字を示したときは、今までの会話で箇条書きされた項目の番号の可能性が有ります。
  - 出力前にJsonの項目に漏れが無いことを確認してください。

  # ユーザーからの質問・依頼
  {request}

  # 制約事項
  - 呼び出し可能なAI Agentは以下の3種類のみです。 
    - answer_llm: LLM自身の知識で回答する。主に挨拶、簡単な質問や指示、過去の会話履歴に対する質問に回答する場合に利用する。WEB検索を行う機能が無いため、必要な場合は他のツールを呼んでください。
    - auto_research: Web検索、RAG検索を使用して深い調査を行う必要が有る場合に利用する。プランを自動的に立案して実施する。
    - ask_human: このAgentがユーザーに質問をしてくれる。ユーザーに不明点を質問するときに呼べますが、できるだけ使用しないようにしてください。revised_requestにはユーザーに聞きたいことを書いてください。LLM自身の回答を求める時は、これではなく、answer_llmを呼んでください。

  # 出力
  以下の例のようなJson形式としてください。
  - agent_name項目: 呼び出すAI Agent名を記入してください。
  - reason_sel項目: 理由を短く記載してください。
  - revised_request項目: 質問を書き換える場合は、変更後の質問を記入してください。
  - revised_reason項目: 質問を書き換えた理由を必ず書いてください。 
  - Json形式で出力してください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。


  出力例： {{ "agent_name": "auto_research", "reason_sel": "～のため。","revised_request": "～とは？","revised_reason": "～のため。"}}

  # 会話履歴
  {msg_history}

  # 現在の日時
  {date_time}

# --- Used at answer_llm.py ---

ans_llm_solo: |
  # 指示
  ユーザーの質問や依頼に回答してください。その際に会話の履歴も考慮してください。
  調査するための情報が不足している場合は、ユーザーに質問をしてください。

  # 質問
  {rev_request}

  # 会話履歴
  {msg_history}

  # 現在の日時
  {date_time}

# --- Used at ask_human.py ---

ask_human: |
  # 指示
  以下の「ユーザーへの質問」を基にユーザーへ質問を行ってください。その際に「会話履歴」も考慮してください。ユーザーから来た最新の質問に答えようとしましたが、情報が不足しているためユーザーに質問をする必要が有ります。

  # ユーザーへの質問
  {rev_request}

  # 会話履歴
  {msg_history}

# --- Used at auto_research.py ---

ans_llm_base: |
  # 指示
  ユーザーの質問や依頼に回答してください。調査履歴が有る場合は、参考にしてください。
  回答は短くしてください。

  # 質問
  {question}

  # 調査履歴
  {res_history}

  # 現在の日時
  {date_time}

ans_arxiv: |
  # 指示
  あなたはarxivのサイトからAPIを使用して技術論文を検索するためのクエリーを作成する専門家です。
  ユーザーの質問を英語に翻訳してから、技術的なキーワード(名詞)のみを抽出して、arxivの検索クエリーを作成してください。
  マルチエージェントなど2つの単語が組み合わされている場合は、キーワードを分割してください。
  絶対に途中の結果を書いてはいけません。クエリーのみを出力してください。
  ユーザーの依頼で他と類似している論文を探すような指示が有る場合は、検索キーワードを3個以内に絞ってください。キーワードが多いと類似の論文が見つからなくなってしまうためです。
  調査履歴が有る場合は、参考にしてください。調査履歴に記載されている内容を基にキーワードを作成することを要求されることも有るためです。

  # 制約条件
  - research, paper等論文に関する一般用語を含めてはいけません。後続処理でarxivで検索をしますが、技術用語のみが検索キーとなるためです。
  - キーワードは全て英語でなければいけません。

  # 出力例
  タイトルまたはアブストラクトに "RAG"と"AGENT を含む、論文を探す場合のクエリー:

  (ti:"RAG" AND ti:"AGENT") OR (ti:"RAG" AND ti:"AGENT")

  # 質問
  {question}

  # 調査履歴
  {res_history}

create_plan: |
  # 指示
  あなたは検索を利用した調査の作業プランを立てる専門家です。ユーザーからの質問・依頼に対して目的を達成するための作業プランを立案してください。
  以下の2ステップで実行してください。

  ## Step1
  - まず、ユーザーからの依頼を読み、調査のゴールを明確にしてください。
  - 作業プランの主語は明確にしてください。
  - 以下の「使用可能なツールの情報」に記載されているツールのみが使用可能です。SNS情報の調査はできません。
  - Vector DBには{vector_db_info}のみが入っていますので、この用途だけで使用してください。無駄なので念のためという理由で「Vector DB検索」を行うのは禁止です。
  - プランを作成するときに会話履歴の情報も考慮してください。会話履歴はユーザーとAI Agentの過去の会話の情報です。
  - 直前の会話でAgentがユーザーに質問をしている場合は、その質問とユーザーの回答を考慮したプランにする必要が有ります。
  -「ユーザーからの依頼」の文言で直接検索するのも有効な手段となります。「～を使用して」等の表現で呼び出すツール名を書くのを避けてください。

  ## Step2
  - 実行可能な形式に変換してください。
  - プランの内容が検索を求めるものや調査を行うものであれば、検索に適した形式にしてください。このプランのまま検索ツールに渡すためです。[～を使用して]等の表現で呼び出すツール名を書くのを避けてください。
    - (例1) 変換前: ～をweb検索する => 変換後: ～について教えてください。 
    - (例2) 変換前: ～を調査する => 変換後: ～について教えてください。 
    - (例3) 変換前: ～を～ツールでweb検索する => 変換後: ～について教えてください。

  # ユーザーからの依頼
  {rev_request}

  # 使用可能なツールの情報
  {tool_info}

  # 制約事項
  - 合計最大 {max_plan} 個までプランを作成可能です。絶対に超えてはいけません。この範囲内で達成可能なプランを立案してください。作成できるプラン数が限られているので、最短で無駄のないプランを作成してください。
  - 検索、分析など異なる作業はプランを分ける必要が有ります。別のツールを使用する必要があるためです。
  - 調査結果をまとめてユーザーへの回答を作成ようなプランは最後に作成する必要は有りません。別の処理で行われるためです。
  - 重複して同じ作業プランを作成しないでください。

  # 出力
  以下の例のようなJson形式としてください。
  - type項目: 固定で"plan"をセットしてください。
  - plan項目: 作業プラン(複数可)を配列形式で記載してください。"plan_status"と同じ数にしてください。
  - plan_status項目: 各プランの実行状況(複数可)を配列形式で記載してください。プラン立案時点のため、全ての値を "open" としてください。"plan" と同じ数の要素を作成してください。
  - Json形式で出力してください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。

  出力例： {{ "type": "plan", "plan":["plan1", "plan2"...], "plan_status": ["open", "open"...]}}

  # 会話履歴
  {msg_history}

  # 現在の日時
  {date_time}

create_final_answer: |
  # 指示
  あなたは文書をまとめる専門家です。与えられた調査結果をもとにユーザーに分かりやすいように質問に対する回答をまとめてください。
  会話履歴も参考にしてください。特に以前に調査した結果の検証などを依頼されている場合は、この会話中の以前の回答と「調査結果」の比較により検証を行てください。
  調査結果の中に文献のソースとなっているURLが記載されている場合は回答に記載してください。
  調査結果の中には複数のリソースから取得した情報が入っています。文書の切れ目を意識して、情報を混在して理解しないようにしてください。

  # ユーザーからの依頼
  {rev_request}

  # 文書の切れ目の例
  - {{"title": "***", "content": "***}}, {{"title": "***", "content": "***}} のケースではカンマで区切られたJsonはそれぞれ全く別の情報となっています。
  - 文書のtitleに固有名詞がある場合は、contentと関係ない場合もありますので関連が確かではない場合は、直接的な回答を避けて、ユーザーに情報源を確認するよう促してください。
  - "## title" で始まるセクションで区切られている情報はそれぞれ全く別の情報となっています。


  # 調査結果
  {res_history}

  # 会話履歴
  {msg_history}

  # 現在の日時
  {date_time}

judge_replan: |
  # 指示
  ユーザーからの依頼に回答するための関連情報が「調査結果」に含まれているかどうかを判定してください。
  判定結果はJson形式で出力してください。出力の値について、含まれている場合はyesとして、そうでなければnoとしてください。(小文字)
  回答するための情報が全くない場合にだけ、noとしてください。むやみにnoとすると、再調査をすることになり回答までの時間がかかってしまうためです。
  判定の理由もJsonの"reason"に記載してください。
  「会話履歴」は前のプロセスでユーザーとAgent行った会話の情報です。
  Json形式で出力してください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。

  # ユーザーからの依頼
  {rev_request}

  # 調査結果
  {res_history}

  # 会話履歴
  {msg_history}

  # 出力例
  {{"is_included": "yes", "reason": "***"}}

  # 現在の日時
  {date_time}

create_revised_plan: |
  # 指示
  あなたは調査の作業プランを立てる専門家です。
  以下の2ステップで実行してください。

  ## Step1
  以下の「前回作成したプラン」を実行して調査を行いましたが、ユーザーからの質問に対するAI Agentの回答が「質問に対する回答が見つかりませんでした」という結論になりました。
  AI Agentが作成したプランに改善の余地が有ると考えられます。リフレクション(反省)を十分に行った後に、新たな改善されたプランを作成してください。ユーザーからの依頼に対して目的を達成するための作業プランです。

  ## Step2
  - 実行可能な形式に変換してください。
  - プランの内容が検索を求めるものや調査を行うものであれば、検索に適した形式にしてください。このプランのまま検索ツールに渡すためです。[～を使用して]等の表現で呼び出すツール名を書くのを避けてください。
    - (例1) 変換前: ～を調査する or ～をweb検索する => 変換後: ～について教えてください。 
    - (例2) 変換前: ～を～ツールでweb検索する => 変換後: ～について教えてください。

  # 制約事項
  - 合計最大 {max_plan} 個までプランを作成可能です。絶対に超えてはいけません。この範囲内で達成可能なプランを立案してください。作成できるプラン数が限られているので、最短で無駄のないプランを作成してください。
  -「Web検索」または「Vector DB検索」のみが実施可能です。SNS情報の調査はできません。
  - Vector DBには{vector_db_info}のみが入っていますので、この用途だけで使用してください。無駄なので念のため「Vector DB検索」を行うのは禁止です。
  - 調査結果をまとめてユーザーへの回答を作成するプランを最後に書く必要は有りません。別の処理で行われるためです。
  - 「前回作成したプラン」と内容と同じプランを立ててはいけません。異なる観点のプランを立てるようにしてください。
  - 直前の会話でAgentがユーザーに質問をしている場合は、その質問とユーザーの回答を考慮したプランにする必要が有ります。
  - 重複して同じ作業プランを作成しないでください。
  - 「ユーザーからの依頼」の文言で直接検索するのも有効な手段となります。

  # 使用可能なツールの情報
  {tool_info}

  # ユーザーからの依頼
  {rev_request}

  # 出力
  以下の例のような1 行のJson形式としてください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。
  - type項目: 固定で"plan"をセットしてください。
  - plan項目: 作業プラン(複数可)を配列形式で記載してください。"plan_status"と同じ数にしてください。
  - plan_status: 各プランの実行状況(複数可)を配列形式で記載してください。プラン立案時点のため、全ての値を "open" としてください。"plan" と同じ数の要素を作成してください。
  - Json形式で出力してください。絶対にテキスト形式で出力しないように十分注意してください。文字列に含まれるダブルクオート（"）やバックスラッシュ（\）などの特殊文字は、JSONの規則に従い必ずエスケープしてください。

  # 出力例
  {{"type": "plan", "plan":["plan1", "plan2"...], "plan_status": ["open", "open"...]}}

  # 前回作成したプラン
  {plan}

  # 現在の日時
  {date_time}
